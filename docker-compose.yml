version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: jware-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - jware-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for pub/sub and caching
  redis:
    image: redis:7-alpine
    container_name: jware-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - jware-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Trading Engine Service (Python/FastAPI)
  trading-engine:
    build:
      context: ./services/trading-engine
      dockerfile: Dockerfile
    container_name: jware-trading-engine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - PYTHON_ENV=${PYTHON_ENV}
    volumes:
      - ./services/trading-engine:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jware-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Market Data Service (Python)
  market-data:
    build:
      context: ./services/market-data
      dockerfile: Dockerfile
    container_name: jware-market-data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - PYTHON_ENV=${PYTHON_ENV}
    volumes:
      - ./services/market-data:/app
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jware-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # API Gateway (Node.js/Express)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: jware-api-gateway
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - API_GATEWAY_SECRET=${API_GATEWAY_SECRET}
      - TRADING_ENGINE_URL=${TRADING_ENGINE_URL}
      - MARKET_DATA_URL=${MARKET_DATA_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - trading-engine
      - market-data
    networks:
      - jware-network
    command: npm run dev

  # Web UI (Next.js)
  web-ui:
    build:
      context: ./services/web-ui
      dockerfile: Dockerfile
    container_name: jware-web-ui
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=http://localhost:3000
    volumes:
      - ./services/web-ui:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3001"
    depends_on:
      - api-gateway
    networks:
      - jware-network
    command: npm run dev

networks:
  jware-network:
    driver: bridge

volumes:
  postgres_data: